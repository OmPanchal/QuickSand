import Head from "next/head";
import { useEffect, useState } from "react";
import { COLOURS, COLOURS_ARR } from "../colours";
import ColourModalRow from "../components/ColourModalRow";
import IconButton from "../components/IconButton";
import Modal from "../components/Modal";
import { ProgressBar } from "../components/ProgressBar";
import SequenceDisplay from "../components/SequenceDisplay";
import TaskList from "../components/taskList/TaskList";
import Title from "../components/Title";
import Tooltip from "../components/Tooltip";
import { useCtx } from "../context/Provider";
import setTheme from "../functions/setTheme";
import time from "../functions/time";
import PauseIcon from "../icons/PauseIcon";
import RedoIcon from "../icons/RedoIcon";
import ResumeIcon from "../icons/ResumeIcon";
import ThemeIcon from "../icons/ThemeIcon";
import EditIcon from "../icons/EditIcon";
import HourGlass from "../components/HourGlass";
import SequenceModalRow from "../components/SequenceModalRow";
import { SEQUENCE } from "../sequence";
import SequenceIcon from "../icons/SequenceIcon";
import addValue from "../functions/addValue";

export default function Home() {
  const {
    seconds,
    theme,
    isColourModalOpen,
    sequence,
    count,
    isSequenceModalOpen,
    durations,
    isDurationModalOpen,
  } = useCtx();
  const [state, setState] = useState(false);
  const [themeArray, setThemeArray] = useState(COLOURS_ARR);
  const [inter, setInter] = useState(1000);
  // const [sequenceArray, setSequenceArray] = useState(SEQUENCE);

  const sequenceArr = SEQUENCE;

  const TYPE = sequence.sequence[count.count];
  console.log(TYPE);

  const callback = {
    // ~ Handle Escape
    Escape: (e) => {
      if (isColourModalOpen.isColourModalOpen) {
        isColourModalOpen.setIsColourModalOpen(false);
        document.getElementById("searchTheme").value = "";
        e.target.blur();
      }
      if (isDurationModalOpen.isDurationModalOpen) {
        isDurationModalOpen.setIsDurationModalOpen(false);
        e.target.blur;
      }
    },
    // ~ Handle Space
    " ": (e) => {
      const searchTheme = document.getElementById("searchTheme");
      const taskListCreator = document.getElementById("taskListCreator");

      const isTaskListCreatorEqualsActive =
        taskListCreator === document.activeElement;
      const isSeachThemeActive = searchTheme === document.activeElement;

      if (
        seconds.seconds !== 0 &&
        !isSeachThemeActive &&
        !isTaskListCreatorEqualsActive
      ) {
        e.target.blur();
        setState(!state);
      }
    },
  };

  // ~ Handle keyboard inputs
  useEffect(() => {
    document.body.onkeyup = (e) => {
      callback[e.key]?.(e);
    };
  });

  // ~ Change the interval depending on the visibility of the tab
  useEffect(() => {
    if (document.visibilityState === "visible") {
      setInter(1000);
      return;
    }
    setInter(500);
  });

  useEffect(() => {
    // ~ do nothing if the timer is paused
    if (state === false) return;

    if (seconds.seconds === 0) {
      if (sequence.sequence[count.count + 1] === undefined) {
        document.getElementById("finish").play();
        setState(false);
        return;
      }

      const TYPE_NEXT = sequence.sequence[count.count + 1];

      if (TYPE_NEXT === "Pomodoro")
        seconds.setSeconds(durations.durations.Pomodoro);
      if (TYPE_NEXT === "Short Break")
        seconds.setSeconds(durations.durations["Short Break"]);
      if (TYPE_NEXT === "Long Break")
        seconds.setSeconds(durations.durations["Long Break"]);

      count.setCount(count.count + 1);
      document.getElementById("update").play();
    }

    // ~ Otherwise update time
    if (seconds.seconds > 0) {
      const interval = setInterval(() => {
        seconds.setSeconds(seconds.seconds - 1);
      }, inter);
      return () => clearInterval(interval);
    } else return;
  });

  return (
    <div
      id="main"
      className="bg-primary flex flex-col items-center justify-top h-screen transition-all"
    >
      <audio src="/audio/finish.wav" id="finish"></audio>
      <audio src="/audio/update.wav" id="update"></audio>
      <Head>
        <title>
          {state ? TYPE + " - " + String(time(seconds)) : "QuickSand"}
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col items-center justify-center w-full h-64 bg-secondary p-4 transition-all">
        <TaskList />
      </div>
      <SequenceDisplay setState={setState} TYPE={TYPE} />
      <div className="flex flex-row items-center justify-center">
        <IconButton
          onClick={() => {
            if (seconds.seconds !== 0) {
              setState(!state);
            }
          }}
        >
          {state ? <PauseIcon /> : <ResumeIcon />}
          <Tooltip>{state ? "Pause" : "Resume"}</Tooltip>
        </IconButton>
        {/* Display the time  */}
        <p className="text-secondary font-QSB text-[168px] font-black select-none">
          {time(seconds)}
        </p>

        <IconButton
          onClick={() => {
            setState(false);
            seconds.setSeconds(durations.durations[sequence.sequence[0]]);
            count.setCount(0);
          }}
        >
          <RedoIcon />
          <Tooltip>Reset to Start</Tooltip>
        </IconButton>
      </div>
      <div className="px-2 py-1 rounded-lg flex flex-row items-center justify-center bg-secondary">
        {/* Theme Icon */}
        <IconButton
          onClick={() => {
            isColourModalOpen.setIsColourModalOpen(true);
          }}
        >
          <ThemeIcon className="text-white m-1" />
          <Tooltip>Change Theme</Tooltip>
        </IconButton>
        {/* Edit Icon */}
        <IconButton
          onClick={() => {
            isSequenceModalOpen.setIsSequenceModalOpen(true);
          }}
        >
          <EditIcon className="text-white m-1" />
          <Tooltip>Edit Timer Sequence</Tooltip>
        </IconButton>
      </div>
      {/*   // ~ Change Sequence Modal */}
      <Modal
        open={isSequenceModalOpen.isSequenceModalOpen}
        onBackClick={() => {
          isSequenceModalOpen.setIsSequenceModalOpen(false);
        }}
        // contentClassName="overflow-auto"
      >
        <div className="w-[300px] flex flex-col items-center">
          <div
            className="py-2 text-[28px] font-QSB text-primary flex flex-row items-center justify-start w-full px-6 overflow-auto"
            id="sequenceModal"
          >
            <SequenceIcon className="mr-2" /> Sequence
          </div>
          <div className="w-full max-h-96 overflow-auto">
            {sequence.sequence.map((type, idx) => {
              return (
                <SequenceModalRow type={TYPE} idx={idx}>
                  {type}
                </SequenceModalRow>
              );
            })}
          </div>
        </div>
      </Modal>

      {/*  // ~ Theme change modal */}
      <Modal
        ifOpen={() => {
          document.getElementById("searchTheme").focus();
          setThemeArray(COLOURS_ARR);
        }}
        open={isColourModalOpen.isColourModalOpen}
        onBackClick={() => {
          isColourModalOpen.setIsColourModalOpen(false);
          document.getElementById("searchTheme").value = "";
        }}
      >
        <div className="w-[470px] pl-6 py-3 pb-1 bg-secondary overflow-auto scroll-smooth font-QSB text-primary text-[28px] flex flex-row items-center justify-between select-none transition-all">
          <span className="flex flex-row items-center ">
            <ThemeIcon className="mr-2" />
            Themes
          </span>
          <input
            id="searchTheme"
            type="text"
            autoComplete="off"
            placeholder="Search a Theme"
            className="outline-none w-60 rounded-l-xl bg-primary text-white px-3 py-1 text-[16px] font-QSM"
            onChange={(e) => {
              // ~ Filter functionality
              setThemeArray(
                COLOURS_ARR.filter((theme) => {
                  const themeVal = theme
                    .slice(0, e.target.value.length)
                    .toLowerCase();
                  const inputVal = e.target.value
                    .slice(0, e.target.value.length)
                    .toLowerCase();
                  return themeVal.includes(inputVal);
                })
              );
            }}
          />
        </div>
        <div className="w-[470px] transition-all h-max max-h-64 py-4 overflow-auto scroll-smooth">
          {themeArray.map((Ctheme, idx) => {
            return (
              <ColourModalRow
                key={idx}
                theme={Ctheme}
                obj={COLOURS[Ctheme]}
                onClick={() => {
                  window.localStorage.setItem("theme", Ctheme);
                  setTheme(COLOURS[Ctheme]);
                  theme.setCurrentTheme(Ctheme);
                }}
                name="theme"
              />
            );
          })}
        </div>
      </Modal>
      {/* // ~ Sequence change modal  */}
      <div className="flex flex-row items-center mt-8">
        <Title />
        <HourGlass state={state} />
      </div>

      <ProgressBar TYPE={TYPE} />
    </div>
  );
}
